// Foundation for Sites by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

////
/// @group functions
////

/// Checks the lightness of `$color`, and if it passes the `$threshold` of lightness, it returns the `$yes` color. Otherwise, it returns the `$no` color. Use this function to dynamically output a foreground color based on a given background color.
///
/// @param {Color} $color - Color to check the lightness of.
/// @param {Color} $yes [$black] - Color to return if `$color` is light.
/// @param {Color} $no [$white] - Color to return if `$color` is dark.
/// @param {Percentage} $threshold [60%] - Threshold of lightness to check against.
///
/// @returns {Color} The $yes color or $no color.
@function foreground($color, $yes: $black, $no: $white, $threshold: 60%) {
  @if $color == transparent {
    $color: $body-background; 
  }
  @if (lightness($color) > $threshold) {
    @return $yes;
  }
  @else {
    @return $no;
  }
}

/// Scales a color to be lighter if it's light, or darker if it's dark. Use this function to tint a color appropriate to its lightness.
///
/// @param {Color} $color - Color to scale.
/// @param {Percentage} $scale [5%] - Amount to scale up or down.
/// @param {Percentage} $threshold [40%] - Threshold of lightness to check against.
///
/// @returns {Color} A scaled color.
@function smart-scale($color, $scale: 5%, $threshold: 40%) {
  @if lightness($color) > $threshold {
    $scale: -$scale;
  }
  @return scale-color($color, $lightness: $scale);
}

/// Transfers the colors in the `$foundation-palette` variable into the legacy color variables, such as `$primary-color` and `$secondary-color`. Call this mixin below the Global section of your settings file to properly migrate your codebase.
@mixin add-foundation-colors() {
  @if map-has-key($foundation-palette, primary) {
    $primary-color: map-get($foundation-palette, primary) !global;
  }
  @if map-has-key($foundation-palette, secondary) {
    $secondary-color: map-get($foundation-palette, secondary) !global;
  }
  @if map-has-key($foundation-palette, success) {
    $success-color: map-get($foundation-palette, success) !global;
  }
  @if map-has-key($foundation-palette, warning) {
    $warning-color: map-get($foundation-palette, warning) !global;
  }
  @if map-has-key($foundation-palette, alert) {
    $alert-color: map-get($foundation-palette, alert) !global;
  }
}

$color-palette: (
  white: (
    base: #ffffff
  ),

  black: (
    base: #000000
  ),

  sky: (
    lighter: #FAFBFC,
    light: #F5F6FA,
    base: #F0F2F7,
    dark: #D1D6E6
  ),

  base: (
    lighter: #808AA8,
    light: #6D758F,
    base: #464B5C,
    dark: #323642
  ),

  blue: (
    lighter: #EBF3FF,
    light: #B3D1FF,
    base: #5C9CFA,
    dark: #5075AB,
    darker: #36465E
  ),

  green: (
    lighter: #EBFFF2,
    light: #AEEBC5,
    base: #77D49A,
    dark: #50AB73,
    darker: #365E45
  ),

  yellow: (
    lighter: #FFF9EB,
    light: #FFE5A8,
    base: #FFD97A,
    dark: #CCAC5A,
    darker: #806F45
  ),

  orange: (
    lighter: #FFF4EB,
    light: #FFC694,
    base: #FAA55A,
    dark: #CC8343,
    darker: #805937
  ),

  red: (
    lighter: #fbeae5,
    light: #fead9a,
    base: #ed6347,
    dark: #bf0711,
    darker: #330101,
    text: #583c35
  ),

  purple: (
    lighter: #EDEBFF,
    light: #BBB3FF,
    base: #7E70E3,
    dark: #5B50AB,
    darker: #553461
  ),

  teal: (
    lighter: #EBFFFE,
    light: #B4F0EE,
    base: #77D8D5,
    dark: #58A8A6,
    darker: #395C5B
  ),

  indigo: (
    lighter: #FAEBFF,
    light: #DFAAF2,
    base: #B866D7,
    dark: #944CAD,
    darker: #3F2747
  )
);


/// Returns the color value for a given color name and group.
///
/// @param {String} $hue - The color's hue.
/// @param {String} $value - The darkness/lightness of the color. Defaults to base.
/// appear. Applies a multiply filter to ensure appropriate contrast.
/// @return {Color} The color value.

@function color($hue, $value: base) {
  $fetched-color: map-get(map-get($color-palette, $hue), $value);

  @if map-has-key($color-palette, $fetched-color) {
    $fetched-color: map-get(map-get($color-palette, $fetched-color), $value);
  }

  @if type-of($fetched-color) == color {
    @return $fetched-color;
  }
}
